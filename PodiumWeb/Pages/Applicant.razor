@page "/CreateApplicant"
@inject HttpClient Http

<h2>Applicant details</h2>
<hr />
<EditForm Model="@model" OnValidSubmit="CreateApplicant">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Firstname</label>
        <InputText @bind-Value="model.firstname" class="form-control" />
        <ValidationMessage For="@(() => model.firstname)" />
    </div>
    <div class="form-group">
        <label>LastName</label>
        <InputText @bind-Value="model.lastname" type="LastName" class="form-control" />
        <ValidationMessage For="@(() => model.lastname)" />
    </div>
    <div class="form-group">
        <label>DateOfBirth</label>
        <InputDate @bind-Value="model.dateOfBirth" type="DateOfBirth" class="form-control" />
        <ValidationMessage For="@(() => model.dateOfBirth)" />
    </div>
    <div class="form-group">
        <label>Email</label>
        <InputText @bind-Value="model.email" type="Email" class="form-control" />
        <ValidationMessage For="@(() => model.email)" />
    </div>
    <button disabled="@loading" class="btn btn-primary">
        @if (loading)
        {
            <span class="spinner-border spinner-border-sm mr-1"></span>
        }
        Create Applicant
    </button>
</EditForm>

@if (applicant == null)
{
<p><em></em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>User Id</th>
                <th>Firstname</th>
                <th>Lastname</th>
                <th>Date of birth</th>
                <th>email</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@applicant.Id</td>
                <td>@applicant.firstName</td>
                <td>@applicant.lastName</td>
                <td>@applicant.dateOfBirth.ToShortDateString()</td>
                <td>@applicant.email</td>
            </tr>
        </tbody>
    </table>
}

@code {
    private Models.NewApplicant model = new Models.NewApplicant();
    private ApplicantDto applicant;
    private bool loading;

    private async void CreateApplicant()
    {
        try
        {
            loading = true;
            using var response = await Http.PostAsJsonAsync("Applicant", model);
            loading = false;
            // convert response data to Article object
            applicant = await response.Content.ReadFromJsonAsync<ApplicantDto>();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            loading = false;
            StateHasChanged();
        }
    }

    public class ApplicantDto
    {
        public Guid Id { get; set; }
        public string firstName { get; set; }
        public string lastName { get; set; }
        public DateTime dateOfBirth { get; set; } = DateTime.Today;
        public string email { get; set; }
    }
}
