@page "/applicant"
@inject HttpClient Http

<h2>Applicant details</h2>
<hr />
<EditForm Model="@model" OnValidSubmit="CreateApplicant">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Firstname</label>
        <InputText @bind-Value="model.Firstname" class="form-control" />
        <ValidationMessage For="@(() => model.Firstname)" />
    </div>
    <div class="form-group">
        <label>LastName</label>
        <InputText @bind-Value="model.Lastname" type="LastName" class="form-control" />
        <ValidationMessage For="@(() => model.Lastname)" />
    </div>
    <div class="form-group">
        <label>DateOfBirth</label>
        <InputDate @bind-Value="model.DateOfBirth" type="DateOfBirth" class="form-control" />
        <ValidationMessage For="@(() => model.DateOfBirth)" />
    </div>
    <div class="form-group">
        <label>Email</label>
        <InputText @bind-Value="model.Email" type="Email" class="form-control" />
        <ValidationMessage For="@(() => model.Email)" />
    </div>
    <button disabled="@loading" class="btn btn-primary">
        @if (loading)
        {
            <span class="spinner-border spinner-border-sm mr-1"></span>
        }
        Create Applicant
    </button>
</EditForm>

@if (applicant != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>User Id</th>
                <th>Firstname</th>
                <th>Lastname</th>
                <th>Date of birth</th>
                <th>email</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@applicant.Id</td>
                <td>@applicant.FirstName</td>
                <td>@applicant.LastName</td>
                <td>@applicant.DateOfBirth.ToShortDateString()</td>
                <td>@applicant.Email</td>
            </tr>
        </tbody>
    </table>
}

@code {
    private Models.NewApplicant model = new Models.NewApplicant();
    private PodiumWeb.Dtos.ApplicantDto applicant;
    private bool loading;

    private async void CreateApplicant()
    {
        try
        {
            loading = true;
            using var response = await Http.PostAsJsonAsync("Applicant", model);
            loading = false;
            applicant = await response.Content.ReadFromJsonAsync<PodiumWeb.Dtos.ApplicantDto>();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            loading = false;
            StateHasChanged();
        }
    }
}
