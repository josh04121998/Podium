@page "/"
@inject HttpClient Http

@if (applicant == null)
{
    <h2>Applicant details</h2>
    <hr />
    <EditForm Model="@model" OnValidSubmit="CreateApplicant">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label>Firstname</label>
            <InputText @bind-Value="model.Firstname" class="form-control" />
            <ValidationMessage For="@(() => model.Firstname)" />
        </div>
        <div class="form-group">
            <label>LastName</label>
            <InputText @bind-Value="model.Lastname" type="LastName" class="form-control" />
            <ValidationMessage For="@(() => model.Lastname)" />
        </div>
        <div class="form-group">
            <label>DateOfBirth</label>
            <InputDate @bind-Value="model.DateOfBirth" type="DateOfBirth" class="form-control" />
            <ValidationMessage For="@(() => model.DateOfBirth)" />
        </div>
        <div class="form-group">
            <label>Email</label>
            <InputText @bind-Value="model.Email" type="Email" class="form-control" />
            <ValidationMessage For="@(() => model.Email)" />
        </div>
        <button disabled="@loading" class="btn btn-primary">
            @if (loading)
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            Create Applicant
        </button>
    </EditForm>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>User Id</th>
                <th>Firstname</th>
                <th>Lastname</th>
                <th>Date of birth</th>
                <th>email</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@applicant.Id</td>
                <td>@applicant.FirstName</td>
                <td>@applicant.LastName</td>
                <td>@applicant.DateOfBirth.ToShortDateString()</td>
                <td>@applicant.Email</td>
            </tr>
        </tbody>
    </table>
    <h2>Mortgage Requirments</h2>
    <hr />
    <EditForm Model="@model" OnValidSubmit="PostMortgageRequirments">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label>ApplicantId</label>
            <InputText @bind-Value="mortgageModel.ApplicantId" class="form-control" />
            <ValidationMessage For="@(() => mortgageModel.ApplicantId)" />
        </div>
        <div class="form-group">
            <label>DepositAmount</label>
            <InputNumber @bind-Value="mortgageModel.DepositAmount" type="DepositAmount" class="form-control" />
            <ValidationMessage For="@(() => mortgageModel.DepositAmount)" />
        </div>
        <div class="form-group">
            <label>PropertyValue</label>
            <InputNumber @bind-Value="mortgageModel.PropertyValue" type="PropertyValue" class="form-control" />
            <ValidationMessage For="@(() => mortgageModel.PropertyValue)" />
        </div>
        <button disabled="@loading" class="btn btn-primary">
            @if (loading)
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            Get Mortgage Proposals
        </button>
        <button @onclick="@Back" class="btn btn-primary">
            Back
        </button>
    </EditForm>
    @if (mortgageProposal != null)
    {
        @if (!CheckApplicantAge(applicant.DateOfBirth))
        {
            <h3>You must be 18 to apply for a mortgage</h3>
        }
        else
        {
            @if (mortgageProposal.Products.Count() > 0)
            {
                <h3>Availible Products</h3>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Lender</th>
                            <th>Intrest Rate</th>
                            <th>Fixed/Variable</th>
                            <th>Loan to value</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in mortgageProposal.Products)
                        {
                            <tr>
                                <td>@product.Product.Lender</td>
                                <td>@product.Product.InterestRate</td>
                                <td>@product.Product.LoanType</td>
                                <td>@product.Product.LoanToValue</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <h3> LTV is not less than 90%</h3>
            }
        }
    }
}

@code {
    private Models.NewApplicant model = new Models.NewApplicant();
    private PodiumWeb.Dtos.ApplicantDto applicant;
    private Models.MortgageRequirements mortgageModel = new Models.MortgageRequirements();
    private PodiumWeb.Dtos.MortgageProposalDto mortgageProposal;
    private bool loading;

    private async void CreateApplicant()
    {
        try
        {
            loading = true;
            using var response = await Http.PostAsJsonAsync("Applicant", model);
            loading = false;
            applicant = await response.Content.ReadFromJsonAsync<PodiumWeb.Dtos.ApplicantDto>();
            mortgageModel.ApplicantId = applicant.Id.ToString();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async void PostMortgageRequirments()
    {
        try
        {
            loading = true;
            using var response = await Http.PostAsJsonAsync("Mortgage", mortgageModel);
            loading = false;
            mortgageProposal = await response.Content.ReadFromJsonAsync<PodiumWeb.Dtos.MortgageProposalDto>();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            loading = false;
            StateHasChanged();
        }
    }

    private void Back()
    {
        model = new Models.NewApplicant();
        applicant = null;
        StateHasChanged();
    }

    public bool CheckApplicantAge(DateTime dateOfBirth)
    {
        var today = DateTime.Today;

        var age = today.Year - dateOfBirth.Year;

        if (dateOfBirth.Date > today.AddYears(-age)) age--;

        return age >= 18;
    }
}
